function [mirt_stack] = aba_groupwise_reg(im_names, mirt)
%aba_groupwise_reg_pair Returns the groupwise registered mean image

filt = @(im) imgaussfilt(im, 1);
preprocess = @(im) standardizeImage(...
    filt(...
    aba_mask_tissue(im)));
% mean_image = @(im1, im2) mean(cat(3, im1, im2), 3);
compute_mean_image = @(im_stack) mean(im_stack, 3);

% Output image size
im_size = [480 480];
num_images = length(im_names);
im_stack = zeros([im_size, num_images]);

% Load images and compute mean
for i = 1:num_images
    im = preprocess(imread(im_names{i}));
    if size(im, 3) ~= 1
        im = rgb2gray(im);
    end
    
    im_stack(:, :, i) = im;
end

mean_image = compute_mean_image(im_stack);

% Prepare registration array of structs
reg = repmat(...
    struct(...
    'ISH',           [],...
    'fixed',         [],...
    'moving',        [],...
    'rigid_aligned', [],...
    'tform',         [],...
    'mirt_reg',      [],...
    'res',           [],...
    'pre_sim',       [],...
    'mid_sim',       [],...
    'post_sim',      [],...
    'ISH_reg',       []),...
    num_images, 1);


for i = 1:num_images
    
    % Rigid align
    [reg(i).rigid_aligned, reg(i).tform] = ...
        aba_rigid_align_new(im_stack(:, :, i), mean_image);
    
    % Remove black edges in background
    reg(i).rigid_aligned(reg(i).rigid_aligned == 0) = 255;
    
    % Crop
    reg(i).rigid_aligned = aba_imcrop_edge(reg(i).rigid_aligned);
    
    % Resize
    reg(i).rigid_aligned = imresize(reg(i).rigid_aligned, im_size);
end

rig_im_stack = cat(3, reg.rigid_aligned);
rig_im_stack(rig_im_stack == 0) = nan;

figure
montage(cat(4, reg.rigid_aligned))

figure
res = mirt2Dgroup_sequence(rig_im_stack, mirt.main, mirt.optim);
mirt_stack = mirt2Dgroup_transform(rig_im_stack, res);

output_file = [fullfile(aba_get_root_dir(), ...
    'registration/groupwise/templates/groupwise'), ...
    '_okno_',     num2str(mirt.main.okno), ...
    '_sim_',      mirt.main.similarity, ...
    '_subdiv_',   num2str(mirt.main.subdivide), ...
    '_lambda_',   num2str(mirt.main.lambda), ...
    '_maxstep_',  num2str(mirt.optim.maxsteps), ...
    '_gamma_',    num2str(mirt.optim.gamma), ...
    '_maxcycle_', num2str(mirt.optim.maxcycle), ...
    '.mat'];
save(output_file, 'mirt_stack', 'rig_im_stack', 'im_stack','mean_image',...
    'reg', 'res');

end

